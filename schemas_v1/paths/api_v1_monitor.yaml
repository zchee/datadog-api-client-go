get:
  description: Get all monitors from your organization.
  operationId: ListMonitors
  parameters:
    - description: |-
        When specified, shows additional information about the group states.
        Choose one or more from `all`, `alert`, `warn`, and `no data`.
      in: query
      name: group_states
      required: false
      schema:
        example: alert
        type: string
    - description: A string to filter monitors by name.
      in: query
      name: name
      required: false
      schema:
        type: string
    - description: >-
        A comma separated list indicating what tags, if any, should be used to
        filter the list of monitors by scope.

        For example, `host:host0`.
      in: query
      name: tags
      required: false
      schema:
        example: host:host0
        type: string
    - description: >-
        A comma separated list indicating what service and/or custom tags, if
        any, should be used to filter the list of monitors.

        Tags created in the Datadog UI automatically have the service key
        prepended. For example, `service:my-app`.
      in: query
      name: monitor_tags
      required: false
      schema:
        example: service:my-app
        type: string
    - description: >-
        If this argument is set to true, then the returned data includes all
        current active downtimes for each monitor.
      in: query
      name: with_downtimes
      required: false
      schema:
        type: boolean
    - description: >-
        Use this parameter for paginating through large sets of monitors. Start
        with a value of zero, make a request, set the value to the last ID of
        result set, and then repeat until the response is empty.
      in: query
      name: id_offset
      required: false
      schema:
        format: int64
        type: integer
    - description: >-
        The page to start paginating from. If this argument is not specified,
        the request returns all monitors without pagination.
      in: query
      name: page
      required: false
      schema:
        example: 0
        format: int64
        type: integer
    - description: >-
        The number of monitors to return per page. If the page argument is not
        specified, the default behavior returns all monitors without a
        `page_size` limit. However, if page is specified and `page_size` is not,
        the argument defaults to 100.
      in: query
      name: page_size
      required: false
      schema:
        default: 100
        example: 20
        format: int32
        maximum: 1000
        type: integer
  responses:
    '200':
      content:
        application/json:
          schema:
            description: An array of monitor objects.
            items:
              $ref: ../components/schemas/Monitor.yaml
            type: array
      description: OK
    '400':
      content:
        application/json:
          schema:
            $ref: ../components/schemas/APIErrorResponsev1.yaml
      description: Bad Request
    '403':
      content:
        application/json:
          schema:
            $ref: ../components/schemas/APIErrorResponsev1.yaml
      description: Forbidden
    '429':
      $ref: ../components/responses/TooManyRequestsResponsev1.yaml
  security:
    - apiKeyAuth: []
      appKeyAuth: []
    - Auth:
        - monitors_read
  summary: Get all monitors
  tags:
    - Monitors v1
  x-pagination:
    limitParam: page_size
    pageParam: page
  x-permission:
    operator: OR
    permissions:
      - monitors_read
post:
  description: >-
    Create a monitor using the specified options.


    #### Monitor Types


    The type of monitor chosen from:


    - anomaly: `query alert`

    - APM: `query alert` or `trace-analytics alert`

    - composite: `composite`

    - custom: `service check`

    - forecast: `query alert`

    - host: `service check`

    - integration: `query alert` or `service check`

    - live process: `process alert`

    - logs: `log alert`

    - metric: `query alert`

    - network: `service check`

    - outlier: `query alert`

    - process: `service check`

    - rum: `rum alert`

    - SLO: `slo alert`

    - watchdog: `event-v2 alert`

    - event-v2: `event-v2 alert`

    - audit: `audit alert`

    - error-tracking: `error-tracking alert`

    - database-monitoring: `database-monitoring alert`

    - network-performance: `network-performance alert`

    - cloud cost: `cost alert`


    **Notes**:

    - Synthetic monitors are created through the Synthetics API. See the
    [Synthetics API](https://docs.datadoghq.com/api/latest/synthetics/)
    documentation for more information.

    - Log monitors require an unscoped App Key.


    #### Query Types


    ##### Metric Alert Query


    Example: `time_aggr(time_window):space_aggr:metric{tags} [by {key}] operator
    #`


    - `time_aggr`: avg, sum, max, min, change, or pct_change

    - `time_window`: `last_#m` (with `#` between 1 and 10080 depending on the
    monitor type) or `last_#h`(with `#` between 1 and 168 depending on the
    monitor type) or `last_1d`, or `last_1w`

    - `space_aggr`: avg, sum, min, or max

    - `tags`: one or more tags (comma-separated), or *

    - `key`: a 'key' in key:value tag syntax; defines a separate alert for each
    tag in the group (multi-alert)

    - `operator`: <, <=, >, >=, ==, or !=

    - `#`: an integer or decimal number used to set the threshold


    If you are using the `_change_` or `_pct_change_` time aggregator, instead
    use `change_aggr(time_aggr(time_window),

    timeshift):space_aggr:metric{tags} [by {key}] operator #` with:


    - `change_aggr` change, pct_change

    - `time_aggr` avg, sum, max, min [Learn
    more](https://docs.datadoghq.com/monitors/create/types/#define-the-conditions)

    - `time_window` last\_#m (between 1 and 2880 depending on the monitor type),
    last\_#h (between 1 and 48 depending on the monitor type), or last_#d (1 or
    2)

    - `timeshift` #m_ago (5, 10, 15, or 30), #h_ago (1, 2, or 4), or 1d_ago


    Use this to create an outlier monitor using the following query:

    `avg(last_30m):outliers(avg:system.cpu.user{role:es-events-data} by {host},
    'dbscan', 7) > 0`


    ##### Service Check Query


    Example: `"check".over(tags).last(count).by(group).count_by_status()`


    - `check` name of the check, for example `datadog.agent.up`

    - `tags` one or more quoted tags (comma-separated), or "*". for example:
    `.over("env:prod", "role:db")`; `over` cannot be blank.

    - `count` must be at greater than or equal to your max threshold (defined in
    the `options`). It is limited to 100.

    For example, if you've specified to notify on 1 critical, 3 ok, and 2 warn
    statuses, `count` should be at least 3.

    - `group` must be specified for check monitors. Per-check grouping is
    already explicitly known for some service checks.

    For example, Postgres integration monitors are tagged by `db`, `host`, and
    `port`, and Network monitors by `host`, `instance`, and `url`. See [Service
    Checks](https://docs.datadoghq.com/api/latest/service-checks/) documentation
    for more information.


    ##### Event Alert Query


    **Note:** The Event Alert Query has been replaced by the Event V2 Alert
    Query. For more information, see the [Event Migration
    guide](https://docs.datadoghq.com/service_management/events/guides/migrating_to_new_events_features/).


    ##### Event V2 Alert Query


    Example: `events(query).rollup(rollup_method[, measure]).last(time_window)
    operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `rollup_method` The stats roll-up method - supports `count`, `avg` and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    ##### Process Alert Query


    Example: `processes(search).over(tags).rollup('count').last(timeframe)
    operator #`


    - `search` free text search string for querying processes.

    Matching processes match results on the [Live
    Processes](https://docs.datadoghq.com/infrastructure/process/?tab=linuxwindows)
    page.

    - `tags` one or more tags (comma-separated)

    - `timeframe` the timeframe to roll up the counts. Examples: 10m, 4h.
    Supported timeframes: s, m, h and d

    - `operator` <, <=, >, >=, ==, or !=

    - `#` an integer or decimal number used to set the threshold


    ##### Logs Alert Query


    Example: `logs(query).index(index_name).rollup(rollup_method[,
    measure]).last(time_window) operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `index_name` For multi-index organizations, the log index in which the
    request is performed.

    - `rollup_method` The stats roll-up method - supports `count`, `avg` and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    ##### Composite Query


    Example: `12345 && 67890`, where `12345` and `67890` are the IDs of
    non-composite monitors


    * `name` [*required*, *default* = **dynamic, based on query**]: The name of
    the alert.

    * `message` [*required*, *default* = **dynamic, based on query**]: A message
    to include with notifications for this monitor.

    Email notifications can be sent to specific users by using the same
    '@username' notation as events.

    * `tags` [*optional*, *default* = **empty list**]: A list of tags to
    associate with your monitor.

    When getting all monitor details via the API, use the `monitor_tags`
    argument to filter results by these tags.

    It is only available via the API and isn't visible or editable in the
    Datadog UI.


    ##### SLO Alert Query


    Example: `error_budget("slo_id").over("time_window") operator #`


    - `slo_id`: The alphanumeric SLO ID of the SLO you are configuring the alert
    for.

    - `time_window`: The time window of the SLO target you wish to alert on.
    Valid options: `7d`, `30d`, `90d`.

    - `operator`: `>=` or `>`


    ##### Audit Alert Query


    Example: `audits(query).rollup(rollup_method[, measure]).last(time_window)
    operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `rollup_method` The stats roll-up method - supports `count`, `avg` and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    ##### CI Pipelines Alert Query


    Example: `ci-pipelines(query).rollup(rollup_method[,
    measure]).last(time_window) operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `rollup_method` The stats roll-up method - supports `count`, `avg`, and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    ##### CI Tests Alert Query


    Example: `ci-tests(query).rollup(rollup_method[, measure]).last(time_window)
    operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `rollup_method` The stats roll-up method - supports `count`, `avg`, and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    ##### Error Tracking Alert Query


    "New issue" example:
    `error-tracking(query).source(issue_source).new().rollup(rollup_method[,
    measure]).by(group_by).last(time_window) operator #`

    "High impact issue" example:
    `error-tracking(query).source(issue_source).impact().rollup(rollup_method[,
    measure]).by(group_by).last(time_window) operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `issue_source` The issue source - supports `all`, `browser`, `mobile` and
    `backend` and defaults to `all` if omitted.

    - `rollup_method` The stats roll-up method - supports `count`, `avg`, and
    `cardinality` and defaults to `count` if omitted.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `group by` Comma-separated list of attributes to group by - should contain
    at least `issue.id`.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    **Database Monitoring Alert Query**


    Example: `database-monitoring(query).rollup(rollup_method[,
    measure]).last(time_window) operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `rollup_method` The stats roll-up method - supports `count`, `avg`, and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    **Network Performance Alert Query**


    Example: `network-performance(query).rollup(rollup_method[,
    measure]).last(time_window) operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `rollup_method` The stats roll-up method - supports `count`, `avg`, and
    `cardinality`.

    - `measure` For `avg` and cardinality `rollup_method` - specify the measure
    or the facet name you want to use.

    - `time_window` #m (between 1 and 2880), #h (between 1 and 48).

    - `operator` `<`, `<=`, `>`, `>=`, `==`, or `!=`.

    - `#` an integer or decimal number used to set the threshold.


    **Cost Alert Query**


    Example: `formula(query).timeframe_type(time_window).function(parameter)
    operator #`


    - `query` The search query - following the [Log search
    syntax](https://docs.datadoghq.com/logs/search_syntax/).

    - `timeframe_type` The timeframe type to evaluate the cost
            - for `forecast` supports `current`
            - for `change`, `anomaly`, `threshold` supports `last`
    - `time_window` - supports daily roll-up e.g. `7d`

    - `function` - [optional, defaults to `threshold` monitor if omitted]
    supports `change`, `anomaly`, `forecast`

    - `parameter` Specify the parameter of the type
        - for `change`:
            - supports `relative`, `absolute`
            - [optional] supports `#`, where `#` is an integer or decimal number used to set the threshold
        - for `anomaly`:
            - supports `direction=both`, `direction=above`, `direction=below`
            - [optional] supports `threshold=#`, where `#` is an integer or decimal number used to set the threshold
    - `operator`
        - for `threshold` supports `<`, `<=`, `>`, `>=`, `==`, or `!=`
        - for `change` supports `>`, `<`
        - for `anomaly` supports `>=`
        - for `forecast` supports `>`
    - `#` an integer or decimal number used to set the threshold.
  operationId: CreateMonitor
  requestBody:
    content:
      application/json:
        examples:
          json-request-body:
            value:
              message: You may need to add web hosts if this is consistently high.
              name: Bytes received on host0
              options:
                no_data_timeframe: 20
                notify_no_data: true
              query: avg(last_5m):sum:system.net.bytes_rcvd{host:host0} > 100
              tags:
                - app:webserver
                - frontend
              type: query alert
        schema:
          $ref: ../components/schemas/Monitor.yaml
    description: Create a monitor request body.
    required: true
  responses:
    '200':
      content:
        application/json:
          schema:
            $ref: ../components/schemas/Monitor.yaml
      description: OK
    '400':
      content:
        application/json:
          schema:
            $ref: ../components/schemas/APIErrorResponsev1.yaml
      description: Bad Request
    '403':
      content:
        application/json:
          schema:
            $ref: ../components/schemas/APIErrorResponsev1.yaml
      description: Forbidden
    '429':
      $ref: ../components/responses/TooManyRequestsResponsev1.yaml
  security:
    - apiKeyAuth: []
      appKeyAuth: []
    - Auth:
        - monitors_write
  summary: Create a monitor
  tags:
    - Monitors v1
  x-codegen-request-body-name: body
  x-permission:
    operator: OR
    permissions:
      - monitors_write
